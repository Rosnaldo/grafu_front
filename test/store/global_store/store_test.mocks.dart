// Mocks generated by Mockito 5.3.2 from annotations
// in grafu/test/store/global_store/store_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i2;
import 'package:grafu/store/signin_store/index.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFlutterSecureStorage_0 extends _i1.SmartFake
    implements _i2.FlutterSecureStorage {
  _FakeFlutterSecureStorage_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SigninStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockSigninStore extends _i1.Mock implements _i3.SigninStore {
  @override
  _i2.FlutterSecureStorage get secureStorage => (super.noSuchMethod(
        Invocation.getter(#secureStorage),
        returnValue: _FakeFlutterSecureStorage_0(
          this,
          Invocation.getter(#secureStorage),
        ),
        returnValueForMissingStub: _FakeFlutterSecureStorage_0(
          this,
          Invocation.getter(#secureStorage),
        ),
      ) as _i2.FlutterSecureStorage);
  @override
  set secureStorage(_i2.FlutterSecureStorage? _secureStorage) =>
      super.noSuchMethod(
        Invocation.setter(
          #secureStorage,
          _secureStorage,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<dynamic> storeLogin(String? e) => (super.noSuchMethod(
        Invocation.method(
          #storeLogin,
          [e],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> removeLogin() => (super.noSuchMethod(
        Invocation.method(
          #removeLogin,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  bool isSignin() => (super.noSuchMethod(
        Invocation.method(
          #isSignin,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
